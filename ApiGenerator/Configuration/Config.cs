using System.Diagnostics.CodeAnalysis;
using ApiGenerator.Logic.Constants;
using ApiGenerator.Logic.Logic;
using ApiGenerator.Logic.Workflow.Models;

namespace ApiGenerator.Logic.Configuration
{
    /// <summary>
    /// Configurations for API Generator.
    /// </summary>
    [ExcludeFromCodeCoverage]
    internal static class Config
    {
        #region File stamp / Header
        // ReSharper disable LocalizableElement
        private static string GetFileStamp()
        {
            return $"// ------------------------------------------------------------------------------{Environment.NewLine}" +
                   $"//  <auto-generated>{Environment.NewLine}" +
                   $"//  {Generator.GetTabs(1)}This code was generated by {nameof(ApiGenerator)} (Thomas M. Krystyan).{Environment.NewLine}" +
                   $"//  {Generator.GetTabs(1)}Version: {Version.Number}.{Environment.NewLine}" +
                   $"//  {Environment.NewLine}" +
                   $"//  {Generator.GetTabs(1)}Changes to this file will be lost when the code is regenerated.{Environment.NewLine}" +
                   $"//  </auto-generated>{Environment.NewLine}" +
                   $"// ------------------------------------------------------------------------------{Environment.NewLine}{Environment.NewLine}";
        }
        #endregion

        /* Defining FROM which logic project its members should be used
           to generate respective interfaces INTO which API project */
        internal static IEnumerable<GenerationSettings> SettingsToUse(bool isTestMode)
        {
            RegisterProjectPaths();

            // -------
            // TESTING
            // -------
            if (isTestMode)
            {
                var registrationSettings = new RegistrationSettings(
                    fileName: @"ModuleRegister",
                    filePathSubfolders: new[] { Folder.Utilities },
                    diUsing: @"Microsoft.Extensions.DependencyInjection",
                    diService: @"IServiceCollection",
                    diMethod: @"AddSingleton"
                );

                yield return new GenerationSettings
                (
                    sourceProjectName: Project.ApiExamples,   // Required: Which project should be used as a source of mapping
                    targetProjectName: Project.ApiExamples,   // Optional: Which project should be used as a target of mapping
                    sourceSubfolders: new[] { @"Classes" },   // Recommended: Subfolders inside the source project folder, otherwise ENTIRE project will be scanned
                    targetSubfolders: new[] { @"Output" },    // Optional: Adding namespaces prefixes if project assembly name is not defined in .csproj
                    new GenerationStrategy(registrationSettings)  // Required: Custom generation preferences
                    {
                        // Optional custom settings
                        FileStamp = GetFileStamp(),
                        UseFullyQualifiedNames = true
                    }
                );
            }
            // -------
            // RELEASE
            // -------
            else
            {
                var registrationSettings = new RegistrationSettings(
                    fileName: @"ModuleRegister",
                    filePathSubfolders: new[] { Folder.Utilities },
                    diUsing: @"Microsoft.Extensions.DependencyInjection",
                    diService: @"IServiceCollection",
                    diMethod: @"AddSingleton"
                );

                var strategy = new GenerationStrategy(registrationSettings)
                {
                    Copyrights = $@"// My copyrights.{Environment.NewLine}{Environment.NewLine}",
                    UseFullyQualifiedNames = false
                };

                yield return GroupLayerSettings(strategy);
                yield return ParentLayerSettings(strategy);
                yield return ViewportSettings(strategy);
                yield return LayerSettings(strategy);
                yield return CommonLayerSettings(strategy);
            }
        }

        private static void RegisterProjectPaths()
        {
            Register.TryAddProjectPaths
            (
                // Name                     // Path
                (Project.ApiExamples,       Path.Combine(Paths.RepositoryDirectory, Project.ApiExamples)),
                (Project.Api,               Path.Combine(Paths.SourcesDirectory.Api(), Project.Api)),
                (Project.Presentation_Core, Path.Combine(Paths.SourcesDirectory.Layers().Presentation(), Project.Presentation_Core))
            );
        }

        #region API mappings
        private static GenerationSettings ViewportSettings(GenerationStrategy strategy) => new(
            Project.Presentation_Core,
            new[] { @"ViewModels", @"Viewport" },
            new[] { @"Models" },
            strategy);

        private static GenerationSettings CommonLayerSettings(GenerationStrategy strategy) => new(
            Project.Presentation_Core,
            new[] { @"ViewModels", @"Common" },
            new[] { @"Models", @"Common" },
            strategy);

        private static GenerationSettings LayerSettings(GenerationStrategy strategy) => new(
            Project.Presentation_Core,
            new[] { @"ViewModels", @"Layering", @"Layers" },
            new[] { @"Models", @"Layers" },
            strategy);

        private static GenerationSettings GroupLayerSettings(GenerationStrategy strategy) => new(
            Project.Presentation_Core,
            new[] { @"ViewModels", @"Layering", @"Layers", @"Group" },
            new[] { @"Models", @"Layers", @"Group" },
            strategy);

        private static GenerationSettings ParentLayerSettings(GenerationStrategy strategy) => new(
            Project.Presentation_Core,
            new[] { @"ViewModels", @"Layering", @"Layers", @"Parents" },
            new[] { @"Models", @"Layers", @"Parents" },
            strategy);
        #endregion
    }
}
